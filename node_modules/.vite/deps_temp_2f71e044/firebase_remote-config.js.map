{
  "version": 3,
  "sources": ["../../@firebase/installations/src/util/constants.ts", "../../@firebase/installations/src/util/errors.ts", "../../@firebase/installations/src/functions/common.ts", "../../@firebase/installations/src/functions/create-installation-request.ts", "../../@firebase/installations/src/util/sleep.ts", "../../@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts", "../../@firebase/installations/src/helpers/generate-fid.ts", "../../@firebase/installations/src/util/get-key.ts", "../../@firebase/installations/src/helpers/fid-changed.ts", "../../@firebase/installations/src/helpers/idb-manager.ts", "../../@firebase/installations/src/helpers/get-installation-entry.ts", "../../@firebase/installations/src/functions/generate-auth-token-request.ts", "../../@firebase/installations/src/helpers/refresh-auth-token.ts", "../../@firebase/installations/src/api/get-id.ts", "../../@firebase/installations/src/api/get-token.ts", "../../@firebase/installations/src/functions/delete-installation-request.ts", "../../@firebase/installations/src/api/delete-installations.ts", "../../@firebase/installations/src/api/on-id-change.ts", "../../@firebase/installations/src/api/get-installations.ts", "../../@firebase/installations/src/helpers/extract-app-config.ts", "../../@firebase/installations/src/functions/config.ts", "../../@firebase/installations/src/index.ts", "../../@firebase/remote-config/src/client/remote_config_fetch_client.ts", "../../@firebase/remote-config/src/constants.ts", "../../@firebase/remote-config/src/errors.ts", "../../@firebase/remote-config/src/value.ts", "../../@firebase/remote-config/src/api.ts", "../../@firebase/remote-config/src/client/caching_client.ts", "../../@firebase/remote-config/src/language.ts", "../../@firebase/remote-config/src/client/rest_client.ts", "../../@firebase/remote-config/src/client/retrying_client.ts", "../../@firebase/remote-config/src/remote_config.ts", "../../@firebase/remote-config/src/storage/storage.ts", "../../@firebase/remote-config/src/storage/storage_cache.ts", "../../@firebase/remote-config/src/client/eventEmitter.ts", "../../@firebase/remote-config/src/client/visibility_monitor.ts", "../../@firebase/remote-config/src/client/realtime_handler.ts", "../../@firebase/remote-config/src/register.ts", "../../@firebase/remote-config/src/api2.ts", "../../@firebase/remote-config/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make TypeScript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID cannot be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n", "/**\n * The Firebase Installations Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomSignals, FetchResponse, FetchType } from '../public_types';\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n\n  /** The custom signals stored for the app instance.\n   *\n   * <p>Optional in case no custom signals are set for the instance.\n   */\n  customSignals?: CustomSignals;\n\n  /**\n   * The type of fetch to perform, such as a regular fetch or a real-time fetch.\n   *\n   * Optional as not all fetch requests need to be distinguished.\n   */\n  fetchType?: FetchType;\n\n  /**\n   * The number of fetch attempts made so far for this request.\n   *\n   * Optional as not all fetch requests are part of a retry series.\n   */\n  fetchAttempt?: number;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\nexport const RC_CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS = 100;\nexport const RC_CUSTOM_SIGNAL_KEY_MAX_LENGTH = 250;\nexport const RC_CUSTOM_SIGNAL_VALUE_MAX_LENGTH = 500;\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  ALREADY_INITIALIZED = 'already-initialized',\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable',\n  CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS = 'custom-signal-max-allowed-signals',\n  CONFIG_UPDATE_STREAM_ERROR = 'stream-error',\n  CONFIG_UPDATE_UNAVAILABLE = 'realtime-unavailable',\n  CONFIG_UPDATE_MESSAGE_INVALID = 'update-message-invalid',\n  CONFIG_UPDATE_NOT_FETCHED = 'update-not-fetched'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.ALREADY_INITIALIZED]: 'Remote Config already initialized',\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser',\n  [ErrorCode.CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS]:\n    'Setting more than {$maxSignals} custom signals is not supported.',\n  [ErrorCode.CONFIG_UPDATE_STREAM_ERROR]:\n    'The stream was not able to connect to the backend: {$originalErrorMessage}.',\n  [ErrorCode.CONFIG_UPDATE_UNAVAILABLE]:\n    'The Realtime service is unavailable: {$originalErrorMessage}',\n  [ErrorCode.CONFIG_UPDATE_MESSAGE_INVALID]:\n    'The stream invalidation message was unparsable: {$originalErrorMessage}',\n  [ErrorCode.CONFIG_UPDATE_NOT_FETCHED]:\n    'Unable to fetch the latest config: {$originalErrorMessage}'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n  [ErrorCode.CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS]: { maxSignals: number };\n  [ErrorCode.CONFIG_UPDATE_STREAM_ERROR]: { originalErrorMessage: string };\n  [ErrorCode.CONFIG_UPDATE_UNAVAILABLE]: { originalErrorMessage: string };\n  [ErrorCode.CONFIG_UPDATE_MESSAGE_INVALID]: { originalErrorMessage: string };\n  [ErrorCode.CONFIG_UPDATE_NOT_FETCHED]: { originalErrorMessage: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport { deepEqual, getModularInstance } from '@firebase/util';\nimport {\n  CustomSignals,\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value,\n  RemoteConfigOptions,\n  ConfigUpdateObserver,\n  Unsubscribe\n} from './public_types';\nimport { RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport {\n  RC_COMPONENT_NAME,\n  RC_CUSTOM_SIGNAL_KEY_MAX_LENGTH,\n  RC_CUSTOM_SIGNAL_VALUE_MAX_LENGTH\n} from './constants';\nimport { ERROR_FACTORY, ErrorCode, hasErrorCode } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Value as ValueImpl } from './value';\nimport { LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @param options - Optional. The {@link RemoteConfigOptions} with which to instantiate the\n *     Remote Config instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(\n  app: FirebaseApp = getApp(),\n  options: RemoteConfigOptions = {}\n): RemoteConfig {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  if (rcProvider.isInitialized()) {\n    const initialOptions = rcProvider.getOptions() as RemoteConfigOptions;\n    if (deepEqual(initialOptions, options)) {\n      return rcProvider.getImmediate();\n    }\n    throw ERROR_FACTORY.create(ErrorCode.ALREADY_INITIALIZED);\n  }\n  rcProvider.initialize({ options });\n  const rc = rcProvider.getImmediate() as RemoteConfigImpl;\n\n  if (options.initialFetchResponse) {\n    // We use these initial writes as the initialization promise since they will hydrate the same\n    // fields that `storageCache.loadFromStorage` would set.\n    rc._initializePromise = Promise.all([\n      rc._storage.setLastSuccessfulFetchResponse(options.initialFetchResponse),\n      rc._storage.setActiveConfigEtag(options.initialFetchResponse?.eTag || ''),\n      rc._storage.setActiveConfigTemplateVersion(\n        options.initialFetchResponse.templateVersion || 0\n      ),\n      rc._storageCache.setLastSuccessfulFetchTimestampMillis(Date.now()),\n      rc._storageCache.setLastFetchStatus('success'),\n      rc._storageCache.setActiveConfig(\n        options.initialFetchResponse?.config || {}\n      )\n    ]).then();\n    // The `storageCache` methods above set their in-memory fields synchronously, so it's\n    // safe to declare our initialization complete at this point.\n    rc._isInitializationComplete = true;\n  }\n\n  return rc;\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    !lastSuccessfulFetchResponse.templateVersion ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag),\n    rc._storage.setActiveConfigTemplateVersion(\n      lastSuccessfulFetchResponse.templateVersion\n    )\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n\n  const customSignals = rc._storageCache.getCustomSignals();\n  if (customSignals) {\n    rc._logger.debug(\n      `Fetching config with custom signals: ${JSON.stringify(customSignals)}`\n    );\n  }\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal,\n      customSignals\n    });\n\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e as Error, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\n      `A value was requested for key \"${key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new ValueImpl('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(\n    `Returning static value for key \"${key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n\n/**\n * Sets the custom signals for the app instance.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param customSignals - Map (key, value) of the custom signals to be set for the app instance. If\n * a key already exists, the value is overwritten. Setting the value of a custom signal to null\n * unsets the signal. The signals will be persisted locally on the client.\n *\n * @public\n */\nexport async function setCustomSignals(\n  remoteConfig: RemoteConfig,\n  customSignals: CustomSignals\n): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (Object.keys(customSignals).length === 0) {\n    return;\n  }\n\n  // eslint-disable-next-line guard-for-in\n  for (const key in customSignals) {\n    if (key.length > RC_CUSTOM_SIGNAL_KEY_MAX_LENGTH) {\n      rc._logger.error(\n        `Custom signal key ${key} is too long, max allowed length is ${RC_CUSTOM_SIGNAL_KEY_MAX_LENGTH}.`\n      );\n      return;\n    }\n    const value = customSignals[key];\n    if (\n      typeof value === 'string' &&\n      value.length > RC_CUSTOM_SIGNAL_VALUE_MAX_LENGTH\n    ) {\n      rc._logger.error(\n        `Value supplied for custom signal ${key} is too long, max allowed length is ${RC_CUSTOM_SIGNAL_VALUE_MAX_LENGTH}.`\n      );\n      return;\n    }\n  }\n\n  try {\n    await rc._storageCache.setCustomSignals(customSignals);\n  } catch (error) {\n    rc._logger.error(\n      `Error encountered while setting custom signals: ${error}`\n    );\n  }\n}\n\n// TODO: Add public document for the Remote Config Realtime API guide on the Web Platform.\n/**\n * Starts listening for real-time config updates from the Remote Config backend and automatically\n * fetches updates from the Remote Config backend when they are available.\n *\n * @remarks\n * If a connection to the Remote Config backend is not already open, calling this method will\n * open it. Multiple listeners can be added by calling this method again, but subsequent calls\n * re-use the same connection to the backend.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param observer - The {@link ConfigUpdateObserver} to be notified of config updates.\n * @returns An {@link Unsubscribe} function to remove the listener.\n *\n * @public\n */\nexport function onConfigUpdate(\n  remoteConfig: RemoteConfig,\n  observer: ConfigUpdateObserver\n): Unsubscribe {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  rc._realtimeHandler.addObserver(observer);\n  return () => {\n    rc._realtimeHandler.removeObserver(observer);\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport { FetchResponse } from '../public_types';\nimport {\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomSignals,\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../public_types';\nimport {\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  custom_signals?: CustomSignals;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n      // TODO: Add this header once CORS error is fixed internally.\n      //'X-Firebase-RC-Fetch-Type': `${fetchType}/${fetchAttempt}`\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage(),\n      custom_signals: request.customSignals\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if ((originalError as Error)?.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: (originalError as Error)?.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n    let templateVersion: number | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: (originalError as Error)?.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n      templateVersion = responseBody['templateVersion'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config, templateVersion };\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchResponse } from '../public_types';\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e as Error)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport { StorageCache } from './storage/storage_cache';\nimport { RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport { Storage } from './storage/storage';\nimport { Logger } from '@firebase/logger';\nimport { RealtimeHandler } from './client/realtime_handler';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/compat/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger,\n    /**\n     * @internal\n     */\n    readonly _realtimeHandler: RealtimeHandler\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus, CustomSignals } from '@firebase/remote-config-types';\nimport { FetchResponse, FirebaseRemoteConfigObject } from '../public_types';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { RC_CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS } from '../constants';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && (originalError as Error)?.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\nexport interface RealtimeBackoffMetadata {\n  // The number of consecutive connection streams that have failed.\n  numFailedStreams: number;\n  // The Date until which the client should wait before attempting any new real-time connections.\n  backoffEndTimeMillis: Date;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata'\n  | 'custom_signals'\n  | 'realtime_backoff_metadata'\n  | 'last_known_template_version';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n      };\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, {\n          originalErrorMessage: (error as Error)?.message\n        })\n      );\n    }\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport abstract class Storage {\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  getCustomSignals(): Promise<CustomSignals | undefined> {\n    return this.get<CustomSignals>('custom_signals');\n  }\n\n  abstract setCustomSignals(\n    customSignals: CustomSignals\n  ): Promise<CustomSignals>;\n  abstract get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined>;\n  abstract set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void>;\n  abstract delete(key: ProjectNamespaceKeyFieldValue): Promise<void>;\n\n  getRealtimeBackoffMetadata(): Promise<RealtimeBackoffMetadata | undefined> {\n    return this.get<RealtimeBackoffMetadata>('realtime_backoff_metadata');\n  }\n\n  setRealtimeBackoffMetadata(\n    realtimeMetadata: RealtimeBackoffMetadata\n  ): Promise<void> {\n    return this.set<RealtimeBackoffMetadata>(\n      'realtime_backoff_metadata',\n      realtimeMetadata\n    );\n  }\n\n  getActiveConfigTemplateVersion(): Promise<number | undefined> {\n    return this.get<number>('last_known_template_version');\n  }\n\n  setActiveConfigTemplateVersion(version: number): Promise<void> {\n    return this.set<number>('last_known_template_version', version);\n  }\n}\n\nexport class IndexedDbStorage extends Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {\n    super();\n  }\n\n  async setCustomSignals(customSignals: CustomSignals): Promise<CustomSignals> {\n    const db = await this.openDbPromise;\n    const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n    const storedSignals = await this.getWithTransaction<CustomSignals>(\n      'custom_signals',\n      transaction\n    );\n    const updatedSignals = mergeCustomSignals(\n      customSignals,\n      storedSignals || {}\n    );\n    await this.setWithTransaction<CustomSignals>(\n      'custom_signals',\n      updatedSignals,\n      transaction\n    );\n    return updatedSignals;\n  }\n\n  /**\n   * Gets a value from the database using the provided transaction.\n   *\n   * @param key The key of the value to get.\n   * @param transaction The transaction to use for the operation.\n   * @returns The value associated with the key, or undefined if no such value exists.\n   */\n  async getWithTransaction<T>(\n    key: ProjectNamespaceKeyFieldValue,\n    transaction: IDBTransaction\n  ): Promise<T | undefined> {\n    return new Promise((resolve, reject) => {\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Sets a value in the database using the provided transaction.\n   *\n   * @param key The key of the value to set.\n   * @param value The value to set.\n   * @param transaction The transaction to use for the operation.\n   * @returns A promise that resolves when the operation is complete.\n   */\n  async setWithTransaction<T>(\n    key: ProjectNamespaceKeyFieldValue,\n    value: T,\n    transaction: IDBTransaction\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n    return this.getWithTransaction<T>(key, transaction);\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n    return this.setWithTransaction<T>(key, value, transaction);\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: (e as Error)?.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n\nexport class InMemoryStorage extends Storage {\n  private storage: { [key: string]: unknown } = {};\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T> {\n    return Promise.resolve(this.storage[key] as T);\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    this.storage[key] = value;\n    return Promise.resolve(undefined);\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    this.storage[key] = undefined;\n    return Promise.resolve();\n  }\n\n  async setCustomSignals(customSignals: CustomSignals): Promise<CustomSignals> {\n    const storedSignals = (this.storage['custom_signals'] ||\n      {}) as CustomSignals;\n    this.storage['custom_signals'] = mergeCustomSignals(\n      customSignals,\n      storedSignals\n    );\n    return Promise.resolve(this.storage['custom_signals'] as CustomSignals);\n  }\n}\n\nfunction mergeCustomSignals(\n  customSignals: CustomSignals,\n  storedSignals: CustomSignals\n): CustomSignals {\n  const combinedSignals = {\n    ...storedSignals,\n    ...customSignals\n  };\n\n  // Filter out key-value assignments with null values since they are signals being unset\n  const updatedSignals = Object.fromEntries(\n    Object.entries(combinedSignals)\n      .filter(([_, v]) => v !== null)\n      .map(([k, v]) => {\n        // Stringify numbers to store a map of string keys and values which can be sent\n        // as-is in a fetch call.\n        if (typeof v === 'number') {\n          return [k, v.toString()];\n        }\n        return [k, v];\n      })\n  );\n\n  // Throw an error if the number of custom signals to be stored exceeds the limit\n  if (\n    Object.keys(updatedSignals).length > RC_CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS\n  ) {\n    throw ERROR_FACTORY.create(ErrorCode.CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS, {\n      maxSignals: RC_CUSTOM_SIGNAL_MAX_ALLOWED_SIGNALS\n    });\n  }\n  return updatedSignals;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus, CustomSignals } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../public_types';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n  private customSignals?: CustomSignals;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  getCustomSignals(): CustomSignals | undefined {\n    return this.customSignals;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n    const customSignalsPromise = this.storage.getCustomSignals();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n\n    const customSignals = await customSignalsPromise;\n    if (customSignals) {\n      this.customSignals = customSignals;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n\n  async setCustomSignals(customSignals: CustomSignals): Promise<void> {\n    this.customSignals = await this.storage.setCustomSignals(customSignals);\n  }\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n// TODO: Consolidate the Visibility monitoring API code into a shared utility function in firebase/util to be used by both packages/database and packages/remote-config.\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]): void {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(\n    eventType: string,\n    callback: (a: unknown) => void,\n    context: unknown\n  ): void {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      //@ts-ignore\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(\n    eventType: string,\n    callback: (a: unknown) => void,\n    context: unknown\n  ): void {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string): void {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './eventEmitter';\n\ndeclare const document: Document;\n\n// TODO: Consolidate the Visibility monitoring API code into a shared utility function in firebase/util to be used by both packages/database and packages/remote-config.\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance(): VisibilityMonitor {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } // @ts-ignore\n      else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } // @ts-ignore\n      else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } // @ts-ignore\n      else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    // @ts-ignore\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          // @ts-ignore\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport {\n  ConfigUpdate,\n  ConfigUpdateObserver,\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../public_types';\nimport { calculateBackoffMillis, FirebaseError } from '@firebase/util';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { Storage } from '../storage/storage';\nimport { VisibilityMonitor } from './visibility_monitor';\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchRequest,\n  RemoteConfigAbortSignal\n} from './remote_config_fetch_client';\nimport { CachingClient } from './caching_client';\n\nconst API_KEY_HEADER = 'X-Goog-Api-Key';\nconst INSTALLATIONS_AUTH_TOKEN_HEADER = 'X-Goog-Firebase-Installations-Auth';\nconst ORIGINAL_RETRIES = 8;\nconst MAXIMUM_FETCH_ATTEMPTS = 3;\nconst NO_BACKOFF_TIME_IN_MILLIS = -1;\nconst NO_FAILED_REALTIME_STREAMS = 0;\nconst REALTIME_DISABLED_KEY = 'featureDisabled';\nconst REALTIME_RETRY_INTERVAL = 'retryIntervalSeconds';\nconst TEMPLATE_VERSION_KEY = 'latestTemplateVersionNumber';\n\nexport class RealtimeHandler {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly storage: Storage,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string,\n    private readonly logger: Logger,\n    private readonly storageCache: StorageCache,\n    private readonly cachingClient: CachingClient\n  ) {\n    void this.setRetriesRemaining();\n    void VisibilityMonitor.getInstance().on(\n      'visible',\n      this.onVisibilityChange,\n      this\n    );\n  }\n\n  private observers: Set<ConfigUpdateObserver> =\n    new Set<ConfigUpdateObserver>();\n  private isConnectionActive: boolean = false;\n  private isRealtimeDisabled: boolean = false;\n  private controller?: AbortController;\n  private reader: ReadableStreamDefaultReader<Uint8Array> | undefined;\n  private httpRetriesRemaining: number = ORIGINAL_RETRIES;\n  private isInBackground: boolean = false;\n  private readonly decoder = new TextDecoder('utf-8');\n  private isClosingConnection: boolean = false;\n\n  private async setRetriesRemaining(): Promise<void> {\n    // Retrieve number of remaining retries from last session. The minimum retry count being one.\n    const metadata = await this.storage.getRealtimeBackoffMetadata();\n    const numFailedStreams = metadata?.numFailedStreams || 0;\n    this.httpRetriesRemaining = Math.max(\n      ORIGINAL_RETRIES - numFailedStreams,\n      1\n    );\n  }\n\n  private propagateError = (e: FirebaseError): void =>\n    this.observers.forEach(o => o.error?.(e));\n\n  /**\n   * Increment the number of failed stream attempts, increase the backoff duration, set the backoff\n   * end time to \"backoff duration\" after `lastFailedStreamTime` and persist the new\n   * values to storage metadata.\n   */\n  private async updateBackoffMetadataWithLastFailedStreamConnectionTime(\n    lastFailedStreamTime: Date\n  ): Promise<void> {\n    const numFailedStreams =\n      ((await this.storage.getRealtimeBackoffMetadata())?.numFailedStreams ||\n        0) + 1;\n    const backoffMillis = calculateBackoffMillis(numFailedStreams, 60000, 2);\n    await this.storage.setRealtimeBackoffMetadata({\n      backoffEndTimeMillis: new Date(\n        lastFailedStreamTime.getTime() + backoffMillis\n      ),\n      numFailedStreams\n    });\n  }\n\n  /**\n   * Increase the backoff duration with a new end time based on Retry Interval.\n   */\n  private async updateBackoffMetadataWithRetryInterval(\n    retryIntervalSeconds: number\n  ): Promise<void> {\n    const currentTime = Date.now();\n    const backoffDurationInMillis = retryIntervalSeconds * 1000;\n    const backoffEndTime = new Date(currentTime + backoffDurationInMillis);\n    const numFailedStreams = 0;\n    await this.storage.setRealtimeBackoffMetadata({\n      backoffEndTimeMillis: backoffEndTime,\n      numFailedStreams\n    });\n    await this.retryHttpConnectionWhenBackoffEnds();\n  }\n\n  /**\n   * HTTP status code that the Realtime client should retry on.\n   */\n  private isStatusCodeRetryable = (statusCode?: number): boolean => {\n    const retryableStatusCodes = [\n      408, // Request Timeout\n      429, // Too Many Requests\n      502, // Bad Gateway\n      503, // Service Unavailable\n      504 // Gateway Timeout\n    ];\n    return !statusCode || retryableStatusCodes.includes(statusCode);\n  };\n\n  /**\n   * Closes the realtime HTTP connection.\n   * Note: This method is designed to be called only once at a time.\n   * If a call is already in progress, subsequent calls will be ignored.\n   */\n  private async closeRealtimeHttpConnection(): Promise<void> {\n    if (this.isClosingConnection) {\n      return;\n    }\n    this.isClosingConnection = true;\n\n    try {\n      if (this.reader) {\n        await this.reader.cancel();\n      }\n    } catch (e) {\n      // The network connection was lost, so cancel() failed.\n      // This is expected in a disconnected state, so we can safely ignore the error.\n      this.logger.debug('Failed to cancel the reader, connection was lost.');\n    } finally {\n      this.reader = undefined;\n    }\n\n    if (this.controller) {\n      await this.controller.abort();\n      this.controller = undefined;\n    }\n\n    this.isClosingConnection = false;\n  }\n\n  private async resetRealtimeBackoff(): Promise<void> {\n    await this.storage.setRealtimeBackoffMetadata({\n      backoffEndTimeMillis: new Date(-1),\n      numFailedStreams: 0\n    });\n  }\n\n  private resetRetryCount(): void {\n    this.httpRetriesRemaining = ORIGINAL_RETRIES;\n  }\n\n  /**\n   * Assembles the request headers and body and executes the fetch request to\n   * establish the real-time streaming connection. This is the \"worker\" method\n   * that performs the actual network communication.\n   */\n  private async establishRealtimeConnection(\n    url: URL,\n    installationId: string,\n    installationTokenResult: string,\n    signal: AbortSignal\n  ): Promise<Response> {\n    const eTagValue = await this.storage.getActiveConfigEtag();\n    const lastKnownVersionNumber =\n      await this.storage.getActiveConfigTemplateVersion();\n\n    const headers = {\n      [API_KEY_HEADER]: this.apiKey,\n      [INSTALLATIONS_AUTH_TOKEN_HEADER]: installationTokenResult,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'If-None-Match': eTagValue || '*',\n      'Content-Encoding': 'gzip'\n    };\n\n    const requestBody = {\n      project: this.projectId,\n      namespace: this.namespace,\n      lastKnownVersionNumber,\n      appId: this.appId,\n      sdkVersion: this.sdkVersion,\n      appInstanceId: installationId\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody),\n      signal\n    });\n    return response;\n  }\n\n  private getRealtimeUrl(): URL {\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfigrealtime.googleapis.com';\n\n    const urlString = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:streamFetchInvalidations?key=${this.apiKey}`;\n    return new URL(urlString);\n  }\n\n  private async createRealtimeConnection(): Promise<Response> {\n    const [installationId, installationTokenResult] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken(false)\n    ]);\n    this.controller = new AbortController();\n    const url = this.getRealtimeUrl();\n    const realtimeConnection = await this.establishRealtimeConnection(\n      url,\n      installationId,\n      installationTokenResult,\n      this.controller.signal\n    );\n    return realtimeConnection;\n  }\n\n  /**\n   * Retries HTTP stream connection asyncly in random time intervals.\n   */\n  private async retryHttpConnectionWhenBackoffEnds(): Promise<void> {\n    let backoffMetadata = await this.storage.getRealtimeBackoffMetadata();\n    if (!backoffMetadata) {\n      backoffMetadata = {\n        backoffEndTimeMillis: new Date(NO_BACKOFF_TIME_IN_MILLIS),\n        numFailedStreams: NO_FAILED_REALTIME_STREAMS\n      };\n    }\n    const backoffEndTime = new Date(\n      backoffMetadata.backoffEndTimeMillis\n    ).getTime();\n    const currentTime = Date.now();\n    const retryMillis = Math.max(0, backoffEndTime - currentTime);\n    await this.makeRealtimeHttpConnection(retryMillis);\n  }\n\n  private setIsHttpConnectionRunning(connectionRunning: boolean): void {\n    this.isConnectionActive = connectionRunning;\n  }\n\n  /**\n   * Combines the check and set operations to prevent multiple asynchronous\n   * calls from redundantly starting an HTTP connection. This ensures that\n   * only one attempt is made at a time.\n   */\n  private checkAndSetHttpConnectionFlagIfNotRunning(): boolean {\n    const canMakeConnection = this.canEstablishStreamConnection();\n    if (canMakeConnection) {\n      this.setIsHttpConnectionRunning(true);\n    }\n    return canMakeConnection;\n  }\n\n  private fetchResponseIsUpToDate(\n    fetchResponse: FetchResponse,\n    lastKnownVersion: number\n  ): boolean {\n    // If there is a config, make sure its version is >= the last known version.\n    if (fetchResponse.config != null && fetchResponse.templateVersion) {\n      return fetchResponse.templateVersion >= lastKnownVersion;\n    }\n    // If there isn't a config, return true if the fetch was successful and backend had no update.\n    // Else, it returned an out of date config.\n    return this.storageCache.getLastFetchStatus() === 'success';\n  }\n\n  private parseAndValidateConfigUpdateMessage(message: string): string {\n    const left = message.indexOf('{');\n    const right = message.indexOf('}', left);\n\n    if (left < 0 || right < 0) {\n      return '';\n    }\n    return left >= right ? '' : message.substring(left, right + 1);\n  }\n\n  private isEventListenersEmpty(): boolean {\n    return this.observers.size === 0;\n  }\n\n  private getRandomInt(max: number): number {\n    return Math.floor(Math.random() * max);\n  }\n\n  private executeAllListenerCallbacks(configUpdate: ConfigUpdate): void {\n    this.observers.forEach(observer => observer.next(configUpdate));\n  }\n\n  /**\n   * Compares two configuration objects and returns a set of keys that have changed.\n   * A key is considered changed if it's new, removed, or has a different value.\n   */\n  private getChangedParams(\n    newConfig: FirebaseRemoteConfigObject,\n    oldConfig: FirebaseRemoteConfigObject\n  ): Set<string> {\n    const changedKeys = new Set<string>();\n    const newKeys = new Set(Object.keys(newConfig || {}));\n    const oldKeys = new Set(Object.keys(oldConfig || {}));\n\n    for (const key of newKeys) {\n      if (!oldKeys.has(key) || newConfig[key] !== oldConfig[key]) {\n        changedKeys.add(key);\n      }\n    }\n\n    for (const key of oldKeys) {\n      if (!newKeys.has(key)) {\n        changedKeys.add(key);\n      }\n    }\n\n    return changedKeys;\n  }\n\n  private async fetchLatestConfig(\n    remainingAttempts: number,\n    targetVersion: number\n  ): Promise<void> {\n    const remainingAttemptsAfterFetch = remainingAttempts - 1;\n    const currentAttempt = MAXIMUM_FETCH_ATTEMPTS - remainingAttemptsAfterFetch;\n    const customSignals = this.storageCache.getCustomSignals();\n    if (customSignals) {\n      this.logger.debug(\n        `Fetching config with custom signals: ${JSON.stringify(customSignals)}`\n      );\n    }\n    const abortSignal = new RemoteConfigAbortSignal();\n    try {\n      const fetchRequest: FetchRequest = {\n        cacheMaxAgeMillis: 0,\n        signal: abortSignal,\n        customSignals,\n        fetchType: 'REALTIME',\n        fetchAttempt: currentAttempt\n      };\n\n      const fetchResponse: FetchResponse = await this.cachingClient.fetch(\n        fetchRequest\n      );\n      let activatedConfigs = await this.storage.getActiveConfig();\n\n      if (!this.fetchResponseIsUpToDate(fetchResponse, targetVersion)) {\n        this.logger.debug(\n          \"Fetched template version is the same as SDK's current version.\" +\n            ' Retrying fetch.'\n        );\n        // Continue fetching until template version number is greater than current.\n        await this.autoFetch(remainingAttemptsAfterFetch, targetVersion);\n        return;\n      }\n\n      if (fetchResponse.config == null) {\n        this.logger.debug(\n          'The fetch succeeded, but the backend had no updates.'\n        );\n        return;\n      }\n\n      if (activatedConfigs == null) {\n        activatedConfigs = {};\n      }\n\n      const updatedKeys = this.getChangedParams(\n        fetchResponse.config,\n        activatedConfigs\n      );\n\n      if (updatedKeys.size === 0) {\n        this.logger.debug('Config was fetched, but no params changed.');\n        return;\n      }\n\n      const configUpdate: ConfigUpdate = {\n        getUpdatedKeys(): Set<string> {\n          return new Set(updatedKeys);\n        }\n      };\n      this.executeAllListenerCallbacks(configUpdate);\n    } catch (e: unknown) {\n      const errorMessage = e instanceof Error ? e.message : String(e);\n      const error = ERROR_FACTORY.create(ErrorCode.CONFIG_UPDATE_NOT_FETCHED, {\n        originalErrorMessage: `Failed to auto-fetch config update: ${errorMessage}`\n      });\n      this.propagateError(error);\n    }\n  }\n\n  private async autoFetch(\n    remainingAttempts: number,\n    targetVersion: number\n  ): Promise<void> {\n    if (remainingAttempts === 0) {\n      const error = ERROR_FACTORY.create(ErrorCode.CONFIG_UPDATE_NOT_FETCHED, {\n        originalErrorMessage:\n          'Unable to fetch the latest version of the template.'\n      });\n      this.propagateError(error);\n      return;\n    }\n\n    const timeTillFetchSeconds = this.getRandomInt(4);\n    const timeTillFetchInMiliseconds = timeTillFetchSeconds * 1000;\n\n    await new Promise(resolve =>\n      setTimeout(resolve, timeTillFetchInMiliseconds)\n    );\n    await this.fetchLatestConfig(remainingAttempts, targetVersion);\n  }\n\n  /**\n   * Processes a stream of real-time messages for configuration updates.\n   * This method reassembles fragmented messages, validates and parses the JSON,\n   * and automatically fetches a new config if a newer template version is available.\n   * It also handles server-specified retry intervals and propagates errors for\n   * invalid messages or when real-time updates are disabled.\n   */\n  private async handleNotifications(\n    reader: ReadableStreamDefaultReader<Uint8Array>\n  ): Promise<void> {\n    let partialConfigUpdateMessage: string;\n    let currentConfigUpdateMessage = '';\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        break;\n      }\n\n      partialConfigUpdateMessage = this.decoder.decode(value, { stream: true });\n      currentConfigUpdateMessage += partialConfigUpdateMessage;\n\n      if (partialConfigUpdateMessage.includes('}')) {\n        currentConfigUpdateMessage = this.parseAndValidateConfigUpdateMessage(\n          currentConfigUpdateMessage\n        );\n\n        if (currentConfigUpdateMessage.length === 0) {\n          continue;\n        }\n\n        try {\n          const jsonObject = JSON.parse(currentConfigUpdateMessage);\n\n          if (this.isEventListenersEmpty()) {\n            break;\n          }\n\n          if (\n            REALTIME_DISABLED_KEY in jsonObject &&\n            jsonObject[REALTIME_DISABLED_KEY] === true\n          ) {\n            const error = ERROR_FACTORY.create(\n              ErrorCode.CONFIG_UPDATE_UNAVAILABLE,\n              {\n                originalErrorMessage:\n                  'The server is temporarily unavailable. Try again in a few minutes.'\n              }\n            );\n            this.propagateError(error);\n            break;\n          }\n\n          if (TEMPLATE_VERSION_KEY in jsonObject) {\n            const oldTemplateVersion =\n              await this.storage.getActiveConfigTemplateVersion();\n            const targetTemplateVersion = Number(\n              jsonObject[TEMPLATE_VERSION_KEY]\n            );\n            if (\n              oldTemplateVersion &&\n              targetTemplateVersion > oldTemplateVersion\n            ) {\n              await this.autoFetch(\n                MAXIMUM_FETCH_ATTEMPTS,\n                targetTemplateVersion\n              );\n            }\n          }\n\n          // This field in the response indicates that the realtime request should retry after the\n          // specified interval to establish a long-lived connection. This interval extends the\n          // backoff duration without affecting the number of retries, so it will not enter an\n          // exponential backoff state.\n          if (REALTIME_RETRY_INTERVAL in jsonObject) {\n            const retryIntervalSeconds = Number(\n              jsonObject[REALTIME_RETRY_INTERVAL]\n            );\n            await this.updateBackoffMetadataWithRetryInterval(\n              retryIntervalSeconds\n            );\n          }\n        } catch (e: unknown) {\n          this.logger.debug('Unable to parse latest config update message.', e);\n          const errorMessage = e instanceof Error ? e.message : String(e);\n          this.propagateError(\n            ERROR_FACTORY.create(ErrorCode.CONFIG_UPDATE_MESSAGE_INVALID, {\n              originalErrorMessage: errorMessage\n            })\n          );\n        }\n        currentConfigUpdateMessage = '';\n      }\n    }\n  }\n\n  private async listenForNotifications(\n    reader: ReadableStreamDefaultReader\n  ): Promise<void> {\n    try {\n      await this.handleNotifications(reader);\n    } catch (e) {\n      // If the real-time connection is at an unexpected lifecycle state when the app is\n      // backgrounded, it's expected closing the connection will throw an exception.\n      if (!this.isInBackground) {\n        // Otherwise, the real-time server connection was closed due to a transient issue.\n        this.logger.debug(\n          'Real-time connection was closed due to an exception.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Open the real-time connection, begin listening for updates, and auto-fetch when an update is\n   * received.\n   *\n   * If the connection is successful, this method will block on its thread while it reads the\n   * chunk-encoded HTTP body. When the connection closes, it attempts to reestablish the stream.\n   */\n  private async prepareAndBeginRealtimeHttpStream(): Promise<void> {\n    if (!this.checkAndSetHttpConnectionFlagIfNotRunning()) {\n      return;\n    }\n\n    let backoffMetadata = await this.storage.getRealtimeBackoffMetadata();\n    if (!backoffMetadata) {\n      backoffMetadata = {\n        backoffEndTimeMillis: new Date(NO_BACKOFF_TIME_IN_MILLIS),\n        numFailedStreams: NO_FAILED_REALTIME_STREAMS\n      };\n    }\n    const backoffEndTime = backoffMetadata.backoffEndTimeMillis.getTime();\n    if (Date.now() < backoffEndTime) {\n      await this.retryHttpConnectionWhenBackoffEnds();\n      return;\n    }\n\n    let response: Response | undefined;\n    let responseCode: number | undefined;\n    try {\n      response = await this.createRealtimeConnection();\n      responseCode = response.status;\n      if (response.ok && response.body) {\n        this.resetRetryCount();\n        await this.resetRealtimeBackoff();\n        const reader = response.body.getReader();\n        this.reader = reader;\n        // Start listening for realtime notifications.\n        await this.listenForNotifications(reader);\n      }\n    } catch (error) {\n      if (this.isInBackground) {\n        // It's possible the app was backgrounded while the connection was open, which\n        // threw an exception trying to read the response. No real error here, so treat\n        // this as a success, even if we haven't read a 200 response code yet.\n        this.resetRetryCount();\n      } else {\n        //there might have been a transient error so the client will retry the connection.\n        this.logger.debug(\n          'Exception connecting to real-time RC backend. Retrying the connection...:',\n          error\n        );\n      }\n    } finally {\n      // Close HTTP connection and associated streams.\n      await this.closeRealtimeHttpConnection();\n      this.setIsHttpConnectionRunning(false);\n\n      // Update backoff metadata if the connection failed in the foreground.\n      const connectionFailed =\n        !this.isInBackground &&\n        (responseCode === undefined ||\n          this.isStatusCodeRetryable(responseCode));\n\n      if (connectionFailed) {\n        await this.updateBackoffMetadataWithLastFailedStreamConnectionTime(\n          new Date()\n        );\n      }\n      // If responseCode is null then no connection was made to server and the SDK should still retry.\n      if (connectionFailed || response?.ok) {\n        await this.retryHttpConnectionWhenBackoffEnds();\n      } else {\n        const errorMessage = `Unable to connect to the server. HTTP status code: ${responseCode}`;\n        const firebaseError = ERROR_FACTORY.create(\n          ErrorCode.CONFIG_UPDATE_STREAM_ERROR,\n          {\n            originalErrorMessage: errorMessage\n          }\n        );\n        this.propagateError(firebaseError);\n      }\n    }\n  }\n\n  /**\n   * Checks whether connection can be made or not based on some conditions\n   * @returns booelean\n   */\n  private canEstablishStreamConnection(): boolean {\n    const hasActiveListeners = this.observers.size > 0;\n    const isNotDisabled = !this.isRealtimeDisabled;\n    const isNoConnectionActive = !this.isConnectionActive;\n    const inForeground = !this.isInBackground;\n    return (\n      hasActiveListeners &&\n      isNotDisabled &&\n      isNoConnectionActive &&\n      inForeground\n    );\n  }\n\n  private async makeRealtimeHttpConnection(delayMillis: number): Promise<void> {\n    if (!this.canEstablishStreamConnection()) {\n      return;\n    }\n    if (this.httpRetriesRemaining > 0) {\n      this.httpRetriesRemaining--;\n      await new Promise(resolve => setTimeout(resolve, delayMillis));\n      void this.prepareAndBeginRealtimeHttpStream();\n    } else if (!this.isInBackground) {\n      const error = ERROR_FACTORY.create(ErrorCode.CONFIG_UPDATE_STREAM_ERROR, {\n        originalErrorMessage:\n          'Unable to connect to the server. Check your connection and try again.'\n      });\n      this.propagateError(error);\n    }\n  }\n\n  private async beginRealtime(): Promise<void> {\n    if (this.observers.size > 0) {\n      await this.makeRealtimeHttpConnection(0);\n    }\n  }\n\n  /**\n   * Adds an observer to the realtime updates.\n   * @param observer The observer to add.\n   */\n  addObserver(observer: ConfigUpdateObserver): void {\n    this.observers.add(observer);\n    void this.beginRealtime();\n  }\n\n  /**\n   * Removes an observer from the realtime updates.\n   * @param observer The observer to remove.\n   */\n  removeObserver(observer: ConfigUpdateObserver): void {\n    if (this.observers.has(observer)) {\n      this.observers.delete(observer);\n    }\n  }\n\n  /**\n   * Handles changes to the application's visibility state, managing the real-time connection.\n   *\n   * When the application is moved to the background, this method closes the existing\n   * real-time connection to save resources. When the application returns to the\n   * foreground, it attempts to re-establish the connection.\n   */\n  private async onVisibilityChange(visible: unknown): Promise<void> {\n    this.isInBackground = !visible;\n    if (!visible) {\n      await this.closeRealtimeHttpConnection();\n    } else if (visible) {\n      await this.beginRealtime();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { RemoteConfig, RemoteConfigOptions } from './public_types';\nimport { name as packageName, version } from '../package.json';\nimport { ensureInitialized } from './api';\nimport { CachingClient } from './client/caching_client';\nimport { RestClient } from './client/rest_client';\nimport { RetryingClient } from './client/retrying_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, ERROR_FACTORY } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { IndexedDbStorage, InMemoryStorage } from './storage/storage';\nimport { StorageCache } from './storage/storage_cache';\nimport { RealtimeHandler } from './client/realtime_handler';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void {\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { options }: { options?: RemoteConfigOptions }\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    const namespace = options?.templateId || 'firebase';\n\n    const storage = isIndexedDBAvailable()\n      ? new IndexedDbStorage(appId, app.name, namespace)\n      : new InMemoryStorage();\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const realtimeHandler = new RealtimeHandler(\n      installations,\n      storage,\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId,\n      logger,\n      storageCache,\n      cachingClient\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger,\n      realtimeHandler\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteConfig } from './public_types';\nimport { activate, fetchConfig } from './api';\nimport {\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n", "/**\n * The Firebase Remote Config Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerRemoteConfig } from './register';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport * from './api';\nexport * from './api2';\nexport * from './public_types';\n\n/** register component and version */\nregisterRemoteConfig();\n"],
  "mappings": "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",
  "names": ["installationEntry", "ERROR_DESCRIPTION_MAP", "ERROR_FACTORY", "ValueImpl", "FirebaseLogLevel", "version", "packageName", "RemoteConfigImpl"]
}
